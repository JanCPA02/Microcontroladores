
primera prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002604  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027cc  080027cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080027cc  080027cc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027cc  080027cc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080027d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000018  080027ec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080027ec  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009efd  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001849  00000000  00000000  00029f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bf  00000000  00000000  0002c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002529a  00000000  00000000  0002cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbfc  00000000  00000000  00051e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e910a  00000000  00000000  0005da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ed8  00000000  00000000  00146b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00149a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002774 	.word	0x08002774

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002774 	.word	0x08002774

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc5f 	bl	8000a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f84c 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ea 	bl	80003ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f89a 	bl	8000310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001dc:	4821      	ldr	r0, [pc, #132]	; (8000264 <main+0x9c>)
 80001de:	f001 fe5f 	bl	8001ea0 <HAL_TIM_Base_Start_IT>
  {
	  	 /* HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	  	  HAL_Delay(delay);
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	  	  HAL_Delay(delay);*/
	  if(ESTADO_SIGUIENTE == ESTADO_INIT)
 80001e2:	4b21      	ldr	r3, [pc, #132]	; (8000268 <main+0xa0>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b06      	cmp	r3, #6
 80001e8:	d104      	bne.n	80001f4 <main+0x2c>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_INIT();
 80001ea:	f000 fb31 	bl	8000850 <Func_ESTADO_INIT>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <main+0xa0>)
 80001f2:	6013      	str	r3, [r2, #0]
	  }

	  if(ESTADO_SIGUIENTE == ESTADO_ABIERTO)
 80001f4:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <main+0xa0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d104      	bne.n	8000206 <main+0x3e>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_ABIERTO();
 80001fc:	f000 fa2c 	bl	8000658 <Func_ESTADO_ABIERTO>
 8000200:	4603      	mov	r3, r0
 8000202:	4a19      	ldr	r2, [pc, #100]	; (8000268 <main+0xa0>)
 8000204:	6013      	str	r3, [r2, #0]
	  }
	  if(ESTADO_SIGUIENTE == ESTADO_CERRADO)
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <main+0xa0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b02      	cmp	r3, #2
 800020c:	d104      	bne.n	8000218 <main+0x50>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_CERRADO();
 800020e:	f000 fa57 	bl	80006c0 <Func_ESTADO_CERRADO>
 8000212:	4603      	mov	r3, r0
 8000214:	4a14      	ldr	r2, [pc, #80]	; (8000268 <main+0xa0>)
 8000216:	6013      	str	r3, [r2, #0]
	  }
	  if(ESTADO_SIGUIENTE == ESTADO_ABRIENDO)
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0xa0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b03      	cmp	r3, #3
 800021e:	d104      	bne.n	800022a <main+0x62>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_ABRIENDO();
 8000220:	f000 fa7a 	bl	8000718 <Func_ESTADO_ABRIENDO>
 8000224:	4603      	mov	r3, r0
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <main+0xa0>)
 8000228:	6013      	str	r3, [r2, #0]
	  }
	  if(ESTADO_SIGUIENTE == ESTADO_CERRANDO)
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <main+0xa0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b04      	cmp	r3, #4
 8000230:	d104      	bne.n	800023c <main+0x74>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_CERRANDO();
 8000232:	f000 faa5 	bl	8000780 <Func_ESTADO_CERRANDO>
 8000236:	4603      	mov	r3, r0
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <main+0xa0>)
 800023a:	6013      	str	r3, [r2, #0]
	  }
	  if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0xa0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b05      	cmp	r3, #5
 8000242:	d104      	bne.n	800024e <main+0x86>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
 8000244:	f000 fad0 	bl	80007e8 <Func_ESTADO_INTERMEDIO>
 8000248:	4603      	mov	r3, r0
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <main+0xa0>)
 800024c:	6013      	str	r3, [r2, #0]
	  }
	  if(ESTADO_SIGUIENTE == ESTADO_ERROR)
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <main+0xa0>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1c5      	bne.n	80001e2 <main+0x1a>
	  {
		  ESTADO_SIGUIENTE = Func_ESTADO_ERROR();
 8000256:	f000 f9dd 	bl	8000614 <Func_ESTADO_ERROR>
 800025a:	4603      	mov	r3, r0
 800025c:	4a02      	ldr	r2, [pc, #8]	; (8000268 <main+0xa0>)
 800025e:	6013      	str	r3, [r2, #0]
	  if(ESTADO_SIGUIENTE == ESTADO_INIT)
 8000260:	e7bf      	b.n	80001e2 <main+0x1a>
 8000262:	bf00      	nop
 8000264:	2000003c 	.word	0x2000003c
 8000268:	20000008 	.word	0x20000008

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b096      	sub	sp, #88	; 0x58
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	2244      	movs	r2, #68	; 0x44
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fa4e 	bl	800271c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800028e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000292:	f000 ff8f 	bl	80011b4 <HAL_PWREx_ControlVoltageScaling>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800029c:	f000 fb3a 	bl	8000914 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	2302      	movs	r3, #2
 80002a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b2:	2302      	movs	r3, #2
 80002b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002b6:	2301      	movs	r3, #1
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002ba:	230a      	movs	r3, #10
 80002bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002be:	2307      	movs	r3, #7
 80002c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c6:	2302      	movs	r3, #2
 80002c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 ffc6 	bl	8001260 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002da:	f000 fb1b 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2303      	movs	r3, #3
 80002e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002f2:	463b      	mov	r3, r7
 80002f4:	2104      	movs	r1, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fb8e 	bl	8001a18 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000302:	f000 fb07 	bl	8000914 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3758      	adds	r7, #88	; 0x58
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000338:	224f      	movs	r2, #79	; 0x4f
 800033a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_TIM2_Init+0x98>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000344:	f242 7210 	movw	r2, #10000	; 0x2710
 8000348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_TIM2_Init+0x98>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000358:	f001 fd4a 	bl	8001df0 <HAL_TIM_Base_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000362:	f000 fad7 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	4619      	mov	r1, r3
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000374:	f001 ff06 	bl	8002184 <HAL_TIM_ConfigClockSource>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800037e:	f000 fac9 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_TIM2_Init+0x98>)
 8000390:	f002 f91e 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800039a:	f000 fabb 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000003c 	.word	0x2000003c

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b40      	ldr	r3, [pc, #256]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a3f      	ldr	r2, [pc, #252]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003da:	4b3a      	ldr	r3, [pc, #232]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a39      	ldr	r2, [pc, #228]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <MX_GPIO_Init+0x118>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <MX_GPIO_Init+0x118>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <MX_GPIO_Init+0x118>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a2d      	ldr	r2, [pc, #180]	; (80004c4 <MX_GPIO_Init+0x118>)
 8000410:	f043 0302 	orr.w	r3, r3, #2
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_GPIO_Init+0x118>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|C_Pin|A_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fe9c 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000436:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800043a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4619      	mov	r1, r3
 8000446:	4820      	ldr	r0, [pc, #128]	; (80004c8 <MX_GPIO_Init+0x11c>)
 8000448:	f000 fccc 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044c:	2320      	movs	r3, #32
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	4619      	mov	r1, r3
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f000 fcbd 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BA_Pin BC_Pin */
  GPIO_InitStruct.Pin = BA_Pin|BC_Pin;
 800046a:	23c0      	movs	r3, #192	; 0xc0
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000472:	2302      	movs	r3, #2
 8000474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fcb0 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin A_Pin */
  GPIO_InitStruct.Pin = C_Pin|A_Pin;
 8000484:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fca0 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SA_Pin SC_Pin */
  GPIO_InitStruct.Pin = SA_Pin|SC_Pin;
 80004a4:	2330      	movs	r3, #48	; 0x30
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_GPIO_Init+0x120>)
 80004b8:	f000 fc94 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004bc:	bf00      	nop
 80004be:	3728      	adds	r7, #40	; 0x28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim2)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
	static int cont_int = 0;

	    if(cont_int == lim1)
 80004d8:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b0a      	cmp	r3, #10
 80004de:	d107      	bne.n	80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>
	    {
	        contador++;
 80004e0:	4b49      	ldr	r3, [pc, #292]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a48      	ldr	r2, [pc, #288]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80004e8:	6013      	str	r3, [r2, #0]
	        cont_int = 0;
 80004ea:	4b46      	ldr	r3, [pc, #280]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	    }

	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, inout.Led);
 80004f0:	4b46      	ldr	r3, [pc, #280]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	2120      	movs	r1, #32
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fe31 	bl	8001168 <HAL_GPIO_WritePin>

	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == TRUE)//boton cerrar
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fe14 	bl	8001138 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	d105      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x52>
	    {
	        inout.Bc = TRUE;
 8000516:	4a3d      	ldr	r2, [pc, #244]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000518:	7813      	ldrb	r3, [r2, #0]
 800051a:	f043 0310 	orr.w	r3, r3, #16
 800051e:	7013      	strb	r3, [r2, #0]
 8000520:	e004      	b.n	800052c <HAL_TIM_PeriodElapsedCallback+0x5c>
	    }
	    else
	    {
	        inout.Bc = FALSE;
 8000522:	4a3a      	ldr	r2, [pc, #232]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000524:	7813      	ldrb	r3, [r2, #0]
 8000526:	f36f 1304 	bfc	r3, #4, #1
 800052a:	7013      	strb	r3, [r2, #0]
	    }

	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == TRUE)//boton abrir
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fe01 	bl	8001138 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x78>
	    {
	 		inout.Ba = TRUE;
 800053c:	4a33      	ldr	r2, [pc, #204]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800053e:	7813      	ldrb	r3, [r2, #0]
 8000540:	f043 0320 	orr.w	r3, r3, #32
 8000544:	7013      	strb	r3, [r2, #0]
 8000546:	e004      	b.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x82>
	    }
	    else
	    {
	    	inout.Ba = FALSE;
 8000548:	4a30      	ldr	r2, [pc, #192]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800054a:	7813      	ldrb	r3, [r2, #0]
 800054c:	f36f 1345 	bfc	r3, #5, #1
 8000550:	7013      	strb	r3, [r2, #0]
	    }

	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == TRUE) //sensor cerrado
 8000552:	2120      	movs	r1, #32
 8000554:	482e      	ldr	r0, [pc, #184]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000556:	f000 fdef 	bl	8001138 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d105      	bne.n	800056c <HAL_TIM_PeriodElapsedCallback+0x9c>
	    {
	 		inout.Sc = TRUE;
 8000560:	4a2a      	ldr	r2, [pc, #168]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000562:	7813      	ldrb	r3, [r2, #0]
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	7013      	strb	r3, [r2, #0]
 800056a:	e004      	b.n	8000576 <HAL_TIM_PeriodElapsedCallback+0xa6>
	    }
	    else
	    {
	    	inout.Sc = FALSE;
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800056e:	7813      	ldrb	r3, [r2, #0]
 8000570:	f36f 0300 	bfc	r3, #0, #1
 8000574:	7013      	strb	r3, [r2, #0]
	    }


	    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == TRUE) //sensor abierto
 8000576:	2110      	movs	r1, #16
 8000578:	4825      	ldr	r0, [pc, #148]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800057a:	f000 fddd 	bl	8001138 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d105      	bne.n	8000590 <HAL_TIM_PeriodElapsedCallback+0xc0>
	    {
	    	inout.Sa = TRUE;
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000586:	7813      	ldrb	r3, [r2, #0]
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	7013      	strb	r3, [r2, #0]
 800058e:	e004      	b.n	800059a <HAL_TIM_PeriodElapsedCallback+0xca>
	    }
	    else
	    {
	       	inout.Sa = FALSE;
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f36f 0341 	bfc	r3, #1, #1
 8000598:	7013      	strb	r3, [r2, #0]
	    }

	    if(inout.Ma == TRUE)//motor abrir
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d107      	bne.n	80005b8 <HAL_TIM_PeriodElapsedCallback+0xe8>
	    {
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fdd9 	bl	8001168 <HAL_GPIO_WritePin>
 80005b6:	e006      	b.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0xf6>
	    }
	    else
	    {
	    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fdd1 	bl	8001168 <HAL_GPIO_WritePin>
	    }

	    if(inout.Mc == TRUE)//motor cerrar
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d107      	bne.n	80005e4 <HAL_TIM_PeriodElapsedCallback+0x114>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f000 fdc3 	bl	8001168 <HAL_GPIO_WritePin>
 80005e2:	e006      	b.n	80005f2 <HAL_TIM_PeriodElapsedCallback+0x122>
		}
	    else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 fdbb 	bl	8001168 <HAL_GPIO_WritePin>
		}

	    cont_int++;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a02      	ldr	r2, [pc, #8]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80005fa:	6013      	str	r3, [r2, #0]

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000088 	.word	0x20000088
 8000608:	20000034 	.word	0x20000034
 800060c:	20000038 	.word	0x20000038
 8000610:	48000400 	.word	0x48000400

08000614 <Func_ESTADO_ERROR>:
  }

}*/

int Func_ESTADO_ERROR(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	static int led_status1 = 0;
	static int led_status2 = 0;
    for(;;)
    {
        led_status1 = inout.Led;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <Func_ESTADO_ERROR+0x38>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <Func_ESTADO_ERROR+0x3c>)
 8000626:	601a      	str	r2, [r3, #0]
    	inout.Led = led_status2;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <Func_ESTADO_ERROR+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2d9      	uxtb	r1, r3
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <Func_ESTADO_ERROR+0x38>)
 8000634:	7813      	ldrb	r3, [r2, #0]
 8000636:	f361 1386 	bfi	r3, r1, #6, #1
 800063a:	7013      	strb	r3, [r2, #0]
        led_status2 = led_status1;
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <Func_ESTADO_ERROR+0x3c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <Func_ESTADO_ERROR+0x40>)
 8000642:	6013      	str	r3, [r2, #0]
        HAL_Delay(199);
 8000644:	20c7      	movs	r0, #199	; 0xc7
 8000646:	f000 fa97 	bl	8000b78 <HAL_Delay>
        led_status1 = inout.Led;
 800064a:	e7e5      	b.n	8000618 <Func_ESTADO_ERROR+0x4>
 800064c:	20000038 	.word	0x20000038
 8000650:	2000008c 	.word	0x2000008c
 8000654:	20000090 	.word	0x20000090

08000658 <Func_ESTADO_ABIERTO>:
    }
}


int Func_ESTADO_ABIERTO(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <Func_ESTADO_ABIERTO+0x58>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <Func_ESTADO_ABIERTO+0x5c>)
 8000662:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABIERTO;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <Func_ESTADO_ABIERTO+0x58>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <Func_ESTADO_ABIERTO+0x60>)
 800066c:	7813      	ldrb	r3, [r2, #0]
 800066e:	f36f 03c3 	bfc	r3, #3, #1
 8000672:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <Func_ESTADO_ABIERTO+0x60>)
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	f36f 0382 	bfc	r3, #2, #1
 800067c:	7013      	strb	r3, [r2, #0]
    inout.Led = 1;
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <Func_ESTADO_ABIERTO+0x60>)
 8000680:	7813      	ldrb	r3, [r2, #0]
 8000682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000686:	7013      	strb	r3, [r2, #0]
    contador = 0;//reset de contador
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <Func_ESTADO_ABIERTO+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

    for(;;)
    {
        if((contador > TIME_Ca - 1) || (inout.Bc == TRUE))
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <Func_ESTADO_ABIERTO+0x64>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b3b      	cmp	r3, #59	; 0x3b
 8000694:	dc06      	bgt.n	80006a4 <Func_ESTADO_ABIERTO+0x4c>
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <Func_ESTADO_ABIERTO+0x60>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d1f4      	bne.n	800068e <Func_ESTADO_ABIERTO+0x36>
        {
            return ESTADO_CERRANDO;
 80006a4:	2304      	movs	r3, #4
        }
    }
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20000004 	.word	0x20000004
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000038 	.word	0x20000038
 80006bc:	20000034 	.word	0x20000034

080006c0 <Func_ESTADO_CERRADO>:

int Func_ESTADO_CERRADO(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <Func_ESTADO_CERRADO+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <Func_ESTADO_CERRADO+0x50>)
 80006ca:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRADO;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <Func_ESTADO_CERRADO+0x4c>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]
    inout.Mc = 0;
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <Func_ESTADO_CERRADO+0x54>)
 80006d4:	7813      	ldrb	r3, [r2, #0]
 80006d6:	f36f 0382 	bfc	r3, #2, #1
 80006da:	7013      	strb	r3, [r2, #0]
    inout.Ma = 0;
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <Func_ESTADO_CERRADO+0x54>)
 80006de:	7813      	ldrb	r3, [r2, #0]
 80006e0:	f36f 03c3 	bfc	r3, #3, #1
 80006e4:	7013      	strb	r3, [r2, #0]
    inout.Led = 1;
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <Func_ESTADO_CERRADO+0x54>)
 80006e8:	7813      	ldrb	r3, [r2, #0]
 80006ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ee:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Ba == TRUE)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <Func_ESTADO_CERRADO+0x54>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d1f8      	bne.n	80006f0 <Func_ESTADO_CERRADO+0x30>
        {
            return ESTADO_ABRIENDO;
 80006fe:	2303      	movs	r3, #3
        }
    }

}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000004 	.word	0x20000004
 8000710:	20000000 	.word	0x20000000
 8000714:	20000038 	.word	0x20000038

08000718 <Func_ESTADO_ABRIENDO>:
int Func_ESTADO_ABRIENDO(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
 	ESTADO_ANTERIOR = ESTADO_ACTUAL;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <Func_ESTADO_ABRIENDO+0x5c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <Func_ESTADO_ABRIENDO+0x60>)
 8000722:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABRIENDO;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <Func_ESTADO_ABRIENDO+0x5c>)
 8000726:	2203      	movs	r2, #3
 8000728:	601a      	str	r2, [r3, #0]
    inout.Led = FALSE;
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <Func_ESTADO_ABRIENDO+0x64>)
 800072c:	7813      	ldrb	r3, [r2, #0]
 800072e:	f36f 1386 	bfc	r3, #6, #1
 8000732:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000734:	4a11      	ldr	r2, [pc, #68]	; (800077c <Func_ESTADO_ABRIENDO+0x64>)
 8000736:	7813      	ldrb	r3, [r2, #0]
 8000738:	f36f 0382 	bfc	r3, #2, #1
 800073c:	7013      	strb	r3, [r2, #0]
    inout.Ma = TRUE;
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <Func_ESTADO_ABRIENDO+0x64>)
 8000740:	7813      	ldrb	r3, [r2, #0]
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	7013      	strb	r3, [r2, #0]

    for(;;){
    	if(inout.Sa == TRUE){
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <Func_ESTADO_ABRIENDO+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b01      	cmp	r3, #1
 8000754:	d101      	bne.n	800075a <Func_ESTADO_ABRIENDO+0x42>
    		return ESTADO_ABIERTO;
 8000756:	2301      	movs	r3, #1
 8000758:	e007      	b.n	800076a <Func_ESTADO_ABRIENDO+0x52>
    	}
    	else if(inout.Bc == TRUE)
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <Func_ESTADO_ABRIENDO+0x64>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b01      	cmp	r3, #1
 8000766:	d1ef      	bne.n	8000748 <Func_ESTADO_ABRIENDO+0x30>
    	{
    	    return ESTADO_CERRANDO;
 8000768:	2304      	movs	r3, #4
    	}
    }
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000004 	.word	0x20000004
 8000778:	20000000 	.word	0x20000000
 800077c:	20000038 	.word	0x20000038

08000780 <Func_ESTADO_CERRANDO>:
int Func_ESTADO_CERRANDO(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <Func_ESTADO_CERRANDO+0x5c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <Func_ESTADO_CERRANDO+0x60>)
 800078a:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRANDO;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <Func_ESTADO_CERRANDO+0x5c>)
 800078e:	2204      	movs	r2, #4
 8000790:	601a      	str	r2, [r3, #0]
    inout.Mc = TRUE;
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <Func_ESTADO_CERRANDO+0x64>)
 8000794:	7813      	ldrb	r3, [r2, #0]
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 800079c:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <Func_ESTADO_CERRANDO+0x64>)
 800079e:	7813      	ldrb	r3, [r2, #0]
 80007a0:	f36f 03c3 	bfc	r3, #3, #1
 80007a4:	7013      	strb	r3, [r2, #0]
    inout.Led = FALSE;
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <Func_ESTADO_CERRANDO+0x64>)
 80007a8:	7813      	ldrb	r3, [r2, #0]
 80007aa:	f36f 1386 	bfc	r3, #6, #1
 80007ae:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Sc == TRUE)
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Func_ESTADO_CERRANDO+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d101      	bne.n	80007c2 <Func_ESTADO_CERRANDO+0x42>
        {
            return ESTADO_CERRADO;
 80007be:	2302      	movs	r3, #2
 80007c0:	e007      	b.n	80007d2 <Func_ESTADO_CERRANDO+0x52>
        }
        else if(inout.Ba == TRUE)
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <Func_ESTADO_CERRANDO+0x64>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d1ef      	bne.n	80007b0 <Func_ESTADO_CERRANDO+0x30>
		{
			return ESTADO_ABRIENDO;
 80007d0:	2303      	movs	r3, #3
		}
    }
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	20000004 	.word	0x20000004
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000038 	.word	0x20000038

080007e8 <Func_ESTADO_INTERMEDIO>:
int Func_ESTADO_INTERMEDIO(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <Func_ESTADO_INTERMEDIO+0x5c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a15      	ldr	r2, [pc, #84]	; (8000848 <Func_ESTADO_INTERMEDIO+0x60>)
 80007f2:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <Func_ESTADO_INTERMEDIO+0x5c>)
 80007f6:	2205      	movs	r2, #5
 80007f8:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <Func_ESTADO_INTERMEDIO+0x64>)
 80007fc:	7813      	ldrb	r3, [r2, #0]
 80007fe:	f36f 0382 	bfc	r3, #2, #1
 8000802:	7013      	strb	r3, [r2, #0]
    inout.Ma = 0;
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <Func_ESTADO_INTERMEDIO+0x64>)
 8000806:	7813      	ldrb	r3, [r2, #0]
 8000808:	f36f 03c3 	bfc	r3, #3, #1
 800080c:	7013      	strb	r3, [r2, #0]
    inout.Led = TRUE;
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <Func_ESTADO_INTERMEDIO+0x64>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000816:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
    	if((inout.Ba == TRUE))
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Func_ESTADO_INTERMEDIO+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b01      	cmp	r3, #1
 8000824:	d101      	bne.n	800082a <Func_ESTADO_INTERMEDIO+0x42>
    	{
    		return ESTADO_ABRIENDO;
 8000826:	2303      	movs	r3, #3
 8000828:	e007      	b.n	800083a <Func_ESTADO_INTERMEDIO+0x52>
    	}

    	if((inout.Bc == TRUE))
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <Func_ESTADO_INTERMEDIO+0x64>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b01      	cmp	r3, #1
 8000836:	d1ef      	bne.n	8000818 <Func_ESTADO_INTERMEDIO+0x30>
    	{
    		return ESTADO_CERRANDO;
 8000838:	2304      	movs	r3, #4
    	}

    }

}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000004 	.word	0x20000004
 8000848:	20000000 	.word	0x20000000
 800084c:	20000038 	.word	0x20000038

08000850 <Func_ESTADO_INIT>:

int Func_ESTADO_INIT(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <Func_ESTADO_INIT+0xb8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2c      	ldr	r2, [pc, #176]	; (800090c <Func_ESTADO_INIT+0xbc>)
 800085a:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INIT;
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <Func_ESTADO_INIT+0xb8>)
 800085e:	2206      	movs	r2, #6
 8000860:	601a      	str	r2, [r3, #0]
    inout.Led = 1;
 8000862:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 8000864:	7813      	ldrb	r3, [r2, #0]
 8000866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086a:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 800086e:	7813      	ldrb	r3, [r2, #0]
 8000870:	f36f 03c3 	bfc	r3, #3, #1
 8000874:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000876:	4a26      	ldr	r2, [pc, #152]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 8000878:	7813      	ldrb	r3, [r2, #0]
 800087a:	f36f 0382 	bfc	r3, #2, #1
 800087e:	7013      	strb	r3, [r2, #0]
    for(;;)
	{

    if((inout.Sa == 1) && (inout.Sc == 1))
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b01      	cmp	r3, #1
 800088c:	d108      	bne.n	80008a0 <Func_ESTADO_INIT+0x50>
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d101      	bne.n	80008a0 <Func_ESTADO_INIT+0x50>
    {
        return ESTADO_ERROR;
 800089c:	2300      	movs	r3, #0
 800089e:	e02e      	b.n	80008fe <Func_ESTADO_INIT+0xae>
    }

    if((inout.Sa == 1) && (inout.Sc == 0))
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d108      	bne.n	80008c0 <Func_ESTADO_INIT+0x70>
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <Func_ESTADO_INIT+0x70>
    {
        return ESTADO_ABIERTO;
 80008bc:	2301      	movs	r3, #1
 80008be:	e01e      	b.n	80008fe <Func_ESTADO_INIT+0xae>
    }

    if((inout.Sc == 1) && (inout.Sa == 0))
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <Func_ESTADO_INIT+0x90>
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <Func_ESTADO_INIT+0x90>
    {
 		return ESTADO_CERRADO;
 80008dc:	2302      	movs	r3, #2
 80008de:	e00e      	b.n	80008fe <Func_ESTADO_INIT+0xae>
    }

    if((inout.Sa == 0) && (inout.Sc == 0))
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1c8      	bne.n	8000880 <Func_ESTADO_INIT+0x30>
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <Func_ESTADO_INIT+0xc0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1c1      	bne.n	8000880 <Func_ESTADO_INIT+0x30>
    {
 		return ESTADO_INTERMEDIO;
 80008fc:	2305      	movs	r3, #5
    }

	}
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	20000004 	.word	0x20000004
 800090c:	20000000 	.word	0x20000000
 8000910:	20000038 	.word	0x20000038

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000978:	d113      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	201c      	movs	r0, #28
 8000998:	f000 f9ed 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800099c:	201c      	movs	r0, #28
 800099e:	f000 fa06 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f89c 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM2_IRQHandler+0x10>)
 8000a0a:	f001 fab9 	bl	8001f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000003c 	.word	0x2000003c

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff ffea 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 fe5f 	bl	800272c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fbab 	bl	80001c8 <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a80:	080027d4 	.word	0x080027d4
  ldr r2, =_sbss
 8000a84:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a88:	20000098 	.word	0x20000098

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>

08000a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f961 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f80e 	bl	8000ac0 <HAL_InitTick>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	e001      	b.n	8000ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab0:	f7ff ff36 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f96d 	bl	8000dca <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f937 	bl	8000d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	2000000c 	.word	0x2000000c
 8000b34:	20000010 	.word	0x20000010

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000014 	.word	0x20000014
 8000b5c:	20000094 	.word	0x20000094

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000094 	.word	0x20000094

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000014 	.word	0x20000014

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff29 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff3e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff31 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e17f      	b.n	80010f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8171 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	6939      	ldr	r1, [r7, #16]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80ac 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <HAL_GPIO_Init+0x334>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x242>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x22a>
 800100a:	2306      	movs	r3, #6
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800100e:	2307      	movs	r3, #7
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001026:	2300      	movs	r3, #0
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x334>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_GPIO_Init+0x350>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x350>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae78 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	48001400 	.word	0x48001400
 8001130:	48001800 	.word	0x48001800
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e001      	b.n	800115a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000

080011b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c2:	d130      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d0:	d038      	beq.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	0c9b      	lsrs	r3, r3, #18
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f8:	e002      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120c:	d102      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x60>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f2      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001220:	d110      	bne.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e00f      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001232:	d007      	beq.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40007000 	.word	0x40007000
 8001258:	2000000c 	.word	0x2000000c
 800125c:	431bde83 	.word	0x431bde83

08001260 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3ca      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001272:	4b97      	ldr	r3, [pc, #604]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127c:	4b94      	ldr	r3, [pc, #592]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80e4 	beq.w	800145c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_RCC_OscConfig+0x4a>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	f040 808b 	bne.w	80013b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 8087 	bne.w	80013b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012aa:	4b89      	ldr	r3, [pc, #548]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x62>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e3a2      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <HAL_RCC_OscConfig+0x7c>
 80012d2:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012da:	e005      	b.n	80012e8 <HAL_RCC_OscConfig+0x88>
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80012de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d223      	bcs.n	8001334 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fd1d 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e383      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a72      	ldr	r2, [pc, #456]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	496d      	ldr	r1, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131e:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4968      	ldr	r1, [pc, #416]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
 8001332:	e025      	b.n	8001380 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4960      	ldr	r1, [pc, #384]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	495b      	ldr	r1, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fcdd 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e343      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001380:	f000 fc4a 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001384:	4602      	mov	r2, r0
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	4950      	ldr	r1, [pc, #320]	; (80014d4 <HAL_RCC_OscConfig+0x274>)
 8001392:	5ccb      	ldrb	r3, [r1, r3]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_RCC_OscConfig+0x278>)
 800139e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a0:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb8b 	bl	8000ac0 <HAL_InitTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d052      	beq.n	800145a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	e327      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d032      	beq.n	8001426 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fbc8 	bl	8000b60 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d4:	f7ff fbc4 	bl	8000b60 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e310      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a36      	ldr	r2, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4931      	ldr	r1, [pc, #196]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	492c      	ldr	r1, [pc, #176]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e01a      	b.n	800145c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001432:	f7ff fb95 	bl	8000b60 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143a:	f7ff fb91 	bl	8000b60 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2dd      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x1da>
 8001458:	e000      	b.n	800145c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d074      	beq.n	8001552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x21a>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b0c      	cmp	r3, #12
 8001472:	d10e      	bne.n	8001492 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d064      	beq.n	8001550 <HAL_RCC_OscConfig+0x2f0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d160      	bne.n	8001550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e2ba      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x24a>
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e026      	b.n	80014f8 <HAL_RCC_OscConfig+0x298>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b2:	d115      	bne.n	80014e0 <HAL_RCC_OscConfig+0x280>
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x298>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	0800278c 	.word	0x0800278c
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	20000010 	.word	0x20000010
 80014e0:	4ba0      	ldr	r3, [pc, #640]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a9f      	ldr	r2, [pc, #636]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a9c      	ldr	r2, [pc, #624]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb2e 	bl	8000b60 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb2a 	bl	8000b60 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e276      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x2a8>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb1a 	bl	8000b60 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fb16 	bl	8000b60 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e262      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x2d0>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d060      	beq.n	8001620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x310>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d119      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d116      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x328>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e23f      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4973      	ldr	r1, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	e040      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fad5 	bl	8000b60 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fad1 	bl	8000b60 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e21d      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015cc:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	495f      	ldr	r1, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5c      	ldr	r2, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80015f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fab1 	bl	8000b60 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff faad 	bl	8000b60 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1f9      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01c      	beq.n	800166e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fa8c 	bl	8000b60 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fa88 	bl	8000b60 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1d4      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ef      	beq.n	800164c <HAL_RCC_OscConfig+0x3ec>
 800166c:	e01b      	b.n	80016a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fa6f 	bl	8000b60 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fa6b 	bl	8000b60 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1b7      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ef      	bne.n	8001686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a6 	beq.w	8001800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10d      	bne.n	80016e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016dc:	2301      	movs	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d118      	bne.n	800171e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fa32 	bl	8000b60 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff fa2e 	bl	8000b60 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e17a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x508>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x4d8>
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001736:	e029      	b.n	800178c <HAL_RCC_OscConfig+0x52c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d115      	bne.n	800176c <HAL_RCC_OscConfig+0x50c>
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_OscConfig+0x504>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x52c>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
 800176c:	4b9c      	ldr	r3, [pc, #624]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	4a9b      	ldr	r2, [pc, #620]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177c:	4b98      	ldr	r3, [pc, #608]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a97      	ldr	r2, [pc, #604]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d016      	beq.n	80017c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff f9e4 	bl	8000b60 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff f9e0 	bl	8000b60 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e12a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ed      	beq.n	800179c <HAL_RCC_OscConfig+0x53c>
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff f9cd 	bl	8000b60 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f9c9 	bl	8000b60 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e113      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ed      	bne.n	80017ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80fe 	beq.w	8001a06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	2b02      	cmp	r3, #2
 8001810:	f040 80d0 	bne.w	80019b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001814:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	429a      	cmp	r2, r3
 8001826:	d130      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	3b01      	subs	r3, #1
 8001834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d127      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11f      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001854:	2a07      	cmp	r2, #7
 8001856:	bf14      	ite	ne
 8001858:	2201      	movne	r2, #1
 800185a:	2200      	moveq	r2, #0
 800185c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185e:	4293      	cmp	r3, r2
 8001860:	d113      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d109      	bne.n	800188a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d06e      	beq.n	8001968 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d069      	beq.n	8001964 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ad      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b8:	f7ff f952 	bl	8000b60 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f94e 	bl	8000b60 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e09a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x784>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ee:	3a01      	subs	r2, #1
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f8:	0212      	lsls	r2, r2, #8
 80018fa:	4311      	orrs	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001900:	0852      	lsrs	r2, r2, #1
 8001902:	3a01      	subs	r2, #1
 8001904:	0552      	lsls	r2, r2, #21
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190c:	0852      	lsrs	r2, r2, #1
 800190e:	3a01      	subs	r2, #1
 8001910:	0652      	lsls	r2, r2, #25
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001918:	0912      	lsrs	r2, r2, #4
 800191a:	0452      	lsls	r2, r2, #17
 800191c:	430a      	orrs	r2, r1
 800191e:	4930      	ldr	r1, [pc, #192]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff f910 	bl	8000b60 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f90c 	bl	8000b60 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e058      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001962:	e050      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e04f      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d148      	bne.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800198c:	f7ff f8e8 	bl	8000b60 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f8e4 	bl	8000b60 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e030      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x734>
 80019b2:	e028      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d023      	beq.n	8001a02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_RCC_OscConfig+0x780>)
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f8cb 	bl	8000b60 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e00c      	b.n	80019e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff f8c7 	bl	8000b60 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d905      	bls.n	80019e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e013      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
 80019e0:	40021000 	.word	0x40021000
 80019e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ec      	bne.n	80019ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4905      	ldr	r1, [pc, #20]	; (8001a10 <HAL_RCC_OscConfig+0x7b0>)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x7b4>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	feeefffc 	.word	0xfeeefffc

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0e7      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4970      	ldr	r1, [pc, #448]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cf      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4960      	ldr	r1, [pc, #384]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0a6      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e08e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e086      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4943      	ldr	r1, [pc, #268]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b00:	f7ff f82e 	bl	8000b60 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f82a 	bl	8000b60 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e06e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d208      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	492b      	ldr	r1, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d210      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4918      	ldr	r1, [pc, #96]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4910      	ldr	r1, [pc, #64]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bcc:	f000 f824 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	490b      	ldr	r1, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1fc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe ff65 	bl	8000ac0 <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	0800278c 	.word	0x0800278c
 8001c10:	2000000c 	.word	0x2000000c
 8001c14:	20000010 	.word	0x20000010

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d11e      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e004      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d134      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d003      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0e5b      	lsrs	r3, r3, #25
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	3301      	adds	r3, #1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d10:	69bb      	ldr	r3, [r7, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	0800279c 	.word	0x0800279c
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff fa26 	bl	8001198 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff fa16 	bl	8001198 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e049      	b.n	8001e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fda6 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 fa9a 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d001      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04f      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee2:	d018      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x76>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d115      	bne.n	8001f42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d015      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0xb4>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d011      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f40:	e008      	b.n	8001f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e000      	b.n	8001f56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	40000c00 	.word	0x40000c00
 8001f74:	40013400 	.word	0x40013400
 8001f78:	40014000 	.word	0x40014000
 8001f7c:	00010007 	.word	0x00010007

08001f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d020      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0202 	mvn.w	r2, #2
 8001fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9ad 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f99f 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9b0 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d020      	beq.n	8002030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0204 	mvn.w	r2, #4
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f987 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f979 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f98a 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0208 	mvn.w	r2, #8
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2204      	movs	r2, #4
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f961 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f953 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f964 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0210 	mvn.w	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2208      	movs	r2, #8
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f93b 	bl	800232a <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f92d 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f93e 	bl	800233e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0201 	mvn.w	r2, #1
 80020e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe f9f2 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 faf2 	bl	80026f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 faea 	bl	8002708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f8fd 	bl	8002352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fab2 	bl	80026e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_ConfigClockSource+0x1c>
 800219c:	2302      	movs	r3, #2
 800219e:	e0b6      	b.n	800230e <HAL_TIM_ConfigClockSource+0x18a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd8>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	f000 8086 	beq.w	80022fa <HAL_TIM_ConfigClockSource+0x176>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xaa>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x11e>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xfe>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x13e>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15e>
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	f000 f9a7 	bl	8002590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04f      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	f000 f990 	bl	8002590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f904 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f95d 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f923 	bl	80024fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f94d 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f8e4 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f93d 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 f934 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022f2:	e003      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80022fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a40      	ldr	r2, [pc, #256]	; (800247c <TIM_Base_SetConfig+0x114>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d00f      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <TIM_Base_SetConfig+0x118>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <TIM_Base_SetConfig+0x11c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <TIM_Base_SetConfig+0x120>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3a      	ldr	r2, [pc, #232]	; (800248c <TIM_Base_SetConfig+0x124>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2f      	ldr	r2, [pc, #188]	; (800247c <TIM_Base_SetConfig+0x114>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d01b      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <TIM_Base_SetConfig+0x118>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d017      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	; (8002484 <TIM_Base_SetConfig+0x11c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <TIM_Base_SetConfig+0x120>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00f      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a29      	ldr	r2, [pc, #164]	; (800248c <TIM_Base_SetConfig+0x124>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00b      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a28      	ldr	r2, [pc, #160]	; (8002490 <TIM_Base_SetConfig+0x128>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <TIM_Base_SetConfig+0x12c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d003      	beq.n	8002402 <TIM_Base_SetConfig+0x9a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <TIM_Base_SetConfig+0x130>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d108      	bne.n	8002414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <TIM_Base_SetConfig+0x114>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00f      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <TIM_Base_SetConfig+0x124>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00b      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <TIM_Base_SetConfig+0x128>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <TIM_Base_SetConfig+0x12c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <TIM_Base_SetConfig+0x130>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40013400 	.word	0x40013400
 8002490:	40014000 	.word	0x40014000
 8002494:	40014400 	.word	0x40014400
 8002498:	40014800 	.word	0x40014800

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 030a 	bic.w	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 0210 	bic.w	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	031b      	lsls	r3, r3, #12
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	f043 0307 	orr.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e068      	b.n	80026ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01d      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d018      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10c      	bne.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40013400 	.word	0x40013400
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00
 80026dc:	40014000 	.word	0x40014000

080026e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <memset>:
 800271c:	4402      	add	r2, r0
 800271e:	4603      	mov	r3, r0
 8002720:	4293      	cmp	r3, r2
 8002722:	d100      	bne.n	8002726 <memset+0xa>
 8002724:	4770      	bx	lr
 8002726:	f803 1b01 	strb.w	r1, [r3], #1
 800272a:	e7f9      	b.n	8002720 <memset+0x4>

0800272c <__libc_init_array>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	4d0d      	ldr	r5, [pc, #52]	; (8002764 <__libc_init_array+0x38>)
 8002730:	4c0d      	ldr	r4, [pc, #52]	; (8002768 <__libc_init_array+0x3c>)
 8002732:	1b64      	subs	r4, r4, r5
 8002734:	10a4      	asrs	r4, r4, #2
 8002736:	2600      	movs	r6, #0
 8002738:	42a6      	cmp	r6, r4
 800273a:	d109      	bne.n	8002750 <__libc_init_array+0x24>
 800273c:	4d0b      	ldr	r5, [pc, #44]	; (800276c <__libc_init_array+0x40>)
 800273e:	4c0c      	ldr	r4, [pc, #48]	; (8002770 <__libc_init_array+0x44>)
 8002740:	f000 f818 	bl	8002774 <_init>
 8002744:	1b64      	subs	r4, r4, r5
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	2600      	movs	r6, #0
 800274a:	42a6      	cmp	r6, r4
 800274c:	d105      	bne.n	800275a <__libc_init_array+0x2e>
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	f855 3b04 	ldr.w	r3, [r5], #4
 8002754:	4798      	blx	r3
 8002756:	3601      	adds	r6, #1
 8002758:	e7ee      	b.n	8002738 <__libc_init_array+0xc>
 800275a:	f855 3b04 	ldr.w	r3, [r5], #4
 800275e:	4798      	blx	r3
 8002760:	3601      	adds	r6, #1
 8002762:	e7f2      	b.n	800274a <__libc_init_array+0x1e>
 8002764:	080027cc 	.word	0x080027cc
 8002768:	080027cc 	.word	0x080027cc
 800276c:	080027cc 	.word	0x080027cc
 8002770:	080027d0 	.word	0x080027d0

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
